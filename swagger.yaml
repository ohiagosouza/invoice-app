openapi: 3.0.3
info:
  title: Sistema de Orçamentos
  description: API para cadastro de usuários, clientes, produtos e geração de orçamentos com autenticação JWT.
  version: 1.0.0

servers:
  - url: http://localhost:8080/api

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Realiza o login e retorna um token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Autenticado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /users:
    post:
      tags: [User]
      summary: Cadastra um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuário criado

  /clients:
    post:
      tags: [Client]
      summary: Cadastra um novo cliente
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Cliente cadastrado

    get:
      tags: [Client]
      summary: Lista todos os clientes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'

  /clients/{id}:
    get:
      tags: [Client]
      summary: Busca um cliente pelo ID
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

    put:
      tags: [Client]
      summary: Atualiza os dados de um cliente
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: Cliente atualizado

    delete:
      tags: [Client]
      summary: Remove um cliente
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Cliente removido

  /products:
    post:
      tags: [Product]
      summary: Cadastra um novo produto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Produto cadastrado

    get:
      tags: [Product]
      summary: Lista todos os produtos
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de produtos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags: [Product]
      summary: Busca um produto pelo ID
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Produto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    put:
      tags: [Product]
      summary: Atualiza os dados de um produto
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Produto atualizado

    delete:
      tags: [Product]
      summary: Remove um produto
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Produto removido

  /invoices:
    post:
      tags: [Invoice]
      summary: Cria um novo orçamento
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
      responses:
        '201':
          description: Orçamento criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'

    get:
      tags: [Invoice]
      summary: Lista todos os orçamentos
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de orçamentos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponse'

  /invoices/{id}:
    get:
      tags: [Invoice]
      summary: Busca um orçamento pelo ID
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orçamento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'

    delete:
      tags: [Invoice]
      summary: Remove um orçamento
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Orçamento removido

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    AuthRequest:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        token: { type: string }

    Address:
      type: object
      properties:
        street: { type: string }
        number: { type: string }
        district: { type: string }
        complement: { type: string }
        city: { type: string }
        state: { type: string }
        country: { type: string }
        zipCode: { type: string }

    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string }
        password: { type: string }
        document: { type: string }
        address:
          $ref: '#/components/schemas/Address'

    Client:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string }
        document: { type: string }
        ownerId: { type: string }
        address:
          $ref: '#/components/schemas/Address'

    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: double }
        category: { type: string }
        stock: { type: integer }

    ProductItem:
      type: object
      properties:
        productId: { type: string }
        name: { type: string }
        quantity: { type: integer }
        unitPrice: { type: number, format: double }
        subtotal: { type: number, format: double }

    InvoiceRequest:
      type: object
      properties:
        clientId: { type: string }
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductItem'
        discount: { type: number, format: double }

    InvoiceResponse:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        clientId: { type: string }
        date: { type: string, format: date-time }
        total: { type: number, format: double }
        discount: { type: number, format: double }
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductItem'