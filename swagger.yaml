openapi: 3.0.3
info:
  title: Quoted Application
  description: API para cadastro de usuários, clientes, produtos e geração de orçamentos com autenticação JWT.
  version: 1.0.0

servers:
  - url: http://localhost:8080/

paths:
  /auth/user/login:
    post:
      tags: [Auth]
      operationId: userLogin
      summary: Realiza o login e retorna um token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Autenticado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /user/register:
    post:
      summary: Cadastra um novo usuário
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Usuário criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /clients/register:
    post:
      tags: [Client]
      summary: Cadastra um novo cliente
      operationId: createClient
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        '201':
          description: Cliente Cadastrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
  /clients/list-all:
    get:
      tags: [Client]
      summary: Lista todos os clientes
      operationId: getAllClients
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientResponse'

  /clients/{id}:
    get:
      tags: [Client]
      summary: Busca um cliente pelo ID
      operationId: getClient
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'

    put:
      tags: [Client]
      summary: Atualiza os dados de um cliente
      operationId: updateClient
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        '200':
          description: Cliente Atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'

    delete:
      tags: [Client]
      summary: Remove um cliente
      operationId: excludeClient
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Cliente deletado

  /products/create:
    post:
      tags: [Product]
      summary: Cadastra um novo produto
      operationId: createProduct
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Produto cadastrado
  /products/list-all:
    get:
      tags: [Product]
      summary: Lista todos os produtos
      operationId: getAllProducts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de produtos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags: [Product]
      summary: Busca um produto pelo ID
      operationId: getProduct
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Produto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    put:
      tags: [Product]
      summary: Atualiza os dados de um produto
      operationId: updateProduct
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Produto atualizado

    delete:
      tags: [Product]
      summary: Remove um produto
      operationId: deleteProduct
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Produto removido

  /invoice:
    post:
      tags: [Invoice]
      summary: Cria um novo orçamento
      operationId: createInvoice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
      responses:
        '201':
          description: Orçamento criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
  /invoice/list-all:
    get:
      tags: [Invoice]
      summary: Lista todos os orçamentos
      operationId: getAllInvoices
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de orçamentos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponse'

  /invoice/{id}:
    get:
      tags: [Invoice]
      summary: Busca um orçamento pelo ID
      operationId: getInvoice
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orçamento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
    put:
      tags: [ Invoice ]
      summary: Atualiza os dados de um produto
      operationId: updateInvoice
      security: [ bearerAuth: [ ] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceResponse'
      responses:
        '200':
          description: Produto atualizado

    delete:
      tags: [Invoice]
      summary: Remove um orçamento
      operationId: deleteInvoice
      security: [ bearerAuth: [] ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Orçamento removido

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    AuthRequest:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        token: { type: string }

    Address:
      type: object
      properties:
        street: { type: string }
        number: { type: string }
        complement: { type: string }
        neighborhood: { type: string }
        city: { type: string }
        state: { type: string }
        country: { type: string }
        zipCode: { type: string }

    UserRequest:
      type: object
      properties:
        id: { type: string }
        businessName: { type: string }
        phoneNumber: { type: string }
        email: { type: string }
        password: { type: string }
        document: { type: string }
        planType:
          type: string
          enum: [ FREE, ESSENTIAL, PRO, ENTERPRISE  ]
          default: FREE
        status:
          type: string
          enum: [ ACTIVE, INACTIVE, SUSPENDED ]
          default: ACTIVE
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        address:
          $ref: '#/components/schemas/Address'
    UserResponse:
      type: object
      properties:
        id: { type: string }
        businessName: { type: string }
        phoneNumber: { type: string }
        email: { type: string }
        document: { type: string }
        userRole:
          type: string
        planType:
          type: string
        status:
          type: string
        createdAt: { type: string, format: date-time }
        address:
          $ref: '#/components/schemas/Address'

    ClientRequest:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string }
        document: { type: string }
        ownerId: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        address:
          $ref: '#/components/schemas/Address'

    ClientResponse:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string }
        document: { type: string }
        ownerId: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        address:
          $ref: '#/components/schemas/Address'

    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: double }
        category: { type: string }
        stock: { type: integer }

    ProductItem:
      type: object
      properties:
        productId: { type: string }
        name: { type: string }
        quantity: { type: integer }
        unitPrice: { type: number, format: double }
        subtotal: { type: number, format: double }

    InvoiceRequest:
      type: object
      properties:
        clientId: { type: string }
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductItem'
        discount: { type: number, format: double }

    InvoiceResponse:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        clientId: { type: string }
        status:
          type: string
          enum: [ CREATED, ACCEPTED, REJECTED, OVERDUE, PAID, CANCELLED ]
          default: CREATED
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        total: { type: number, format: double }
        discount: { type: number, format: double }
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductItem'